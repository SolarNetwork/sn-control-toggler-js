{"version":3,"sources":["../src/controlToggler.js"],"names":["SetControlParameterInstructionName","InstructionActiveStates","Set","InstructionStates","Queued","Received","Executing","InstructionFinishedStates","Completed","Declined","ControlToggler","urlHelper","authBuilder","controlId","queryUrlHelper","instructionUrlHelper","AuthorizationV2Builder","environment","undefined","NodeDatumUrlHelper","nodeId","sourceId","timer","lastKnownDatum","lastKnownInstruction","refreshMs","pendingRefreshMs","callback","error","this","call","self","callbackError","log","data","Array","isArray","length","instruction","reduce","prev","curr","topic","parameters","name","created","debug","state","value","InstructionState","valueOf","Number","hasPendingStateChange","controlDatum","equals","status","val","statusDate","dateParser","instructionDate","getTime","request","method","url","contentType","now","Date","reset","date","snDate","setRequestHeader","HttpHeaders","X_SN_DATE","requestDateHeaderValue","AUTHORIZATION","buildWithSavedKey","q","queryIndex","reqData","HttpMethod","GET","indexOf","substring","HttpContentType","FORM_URLENCODED_UTF8","req","xhrRequest","mimeType","APPLICATION_JSON","on","_this","handleRequestAuth","header","defer","send","desiredValue","arguments","signingKeyValid","Error","instrUrlHelper","queue","currentValue","pendingState","lastKnownInstructionState","pendingValue","lastKnownInstructionValue","cancelInstructionUrl","updateInstructionStateUrl","id","deferJsonRequestWithAuth","POST","queueInstructionUrl","String","awaitAll","results","_this2","notifyDelegate","forEach","e","i","responseText","JSON","parse","cancelResult","success","instructionResult","stop","start","currentRefreshMs","mostRecentUrl","mostRecentDatumUrl","viewPendingUrl","viewPendingInstructionsUrl","has","viewInstructionUrl","_this3","mostRecentDatum","active","executing","mostRecentControlDatum","find","execInstruction","pendingInstruction","getActiveInstruction","newValue","mostRecentValue","setTimeout","update","when","_this4","clearTimeout"],"mappings":"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","file":"lib/solarnetwork-control-toggler.es.min.js.map","sourcesContent":["import { request as xhrRequest } from \"d3-request\";\nimport { queue } from \"d3-queue\";\nimport {\n  AuthorizationV2Builder,\n  dateParser,\n  HttpContentType,\n  HttpHeaders,\n  HttpMethod,\n  InstructionState,\n  InstructionStates,\n  Logger as log,\n  NodeDatumUrlHelper\n} from \"solarnetwork-api-core\";\n\nconst SetControlParameterInstructionName = \"SetControlParameter\";\n\n/**\n * Instruction states that indicate a toggle instruction is in-flight.\n * @type {Set}\n * @private\n */\nconst InstructionActiveStates = new Set([\n  InstructionStates.Queued,\n  InstructionStates.Received,\n  InstructionStates.Executing\n]);\n\n/**\n * Instruction states that indicate a toggle instruction is comleted or declined.\n * @type {Set}\n * @private\n */\nconst InstructionFinishedStates = new Set([\n  InstructionStates.Completed,\n  InstructionStates.Declined\n]);\n\n/**\n * @typedef {Object} ControlDatum\n * @property {string} created the datum date\n * @property {string} sourceId the control ID\n * @property {number} val the control value, essentially `0` or `1`\n */\n\n/**\n * @typedef {Object} InstructionParameter\n * @property {string} name the parameter name\n * @property {string} value the parameter value\n */\n\n/**\n * @typedef {Object} Instruction\n * @property {number} id the unique ID of the instruction\n * @property {string} created the instruction date\n * @property {string} status an `InstructionStatus` name value\n * @property {InstructionParameter[]} [parameters] the instruction parameters\n */\n\n/**\n * The status callback function.\n *\n * This function will be invoked whenever the control value has changed. Additionally, it will be\n * invoked periodically while a state change has not been completed, even if the control value\n * has not changed. Use {@link ControlToggler#value} to get the current control value and\n * {@link ControlToggler#hasPendingStateChange} to test if that value is still pending.\n *\n * @callback ControlToggler~statusCallback\n * @this ControlToggler\n * @param {Error} [error] an error if a failure occurred\n */\n\n/**\n * Manage the state of a boolean control switch using SolarNetwork `SetControlParameter` instructions.\n *\n * Use an instance of this class to keep track of, and update the state of, a single switch-like\n * control configured on a SolarNode. Because updating the state of a control is an asynchronous\n * process involving multiple steps, this class simplifies this with a simple callback API that\n * will be invoked whenever the control value changes.\n *\n * Once the {@link ControlToggler#start} method has been called, the toggler will make periodic\n * calls to SolarNetwork to get the most recent value for the configured control ID, which it\n * treats as a {@link ControlDatum} `sourceId` value. Thus if some other process changes the\n * control, the toggler will eventually pick up that change and invoke the callback function.\n *\n * @example\n * const urlHelper = new NodeInstructionUrlHelper();\n * urlHelper.nodeId = 123;\n *\n * const auth = new TestAuthBuilder('token');\n * auth.saveSigningKey('secret');\n *\n * const toggler = new ControlTogger(urlHelper, auth, '/power/switch/1');\n * toggler.callback = function(error) {\n *   // invoked when instruction states change, or the control value changes\n *   console.log(`Control ${toggler.controlId} value == ${toggler.value()}; pending == ${toggler.hasPendingStateChange}`);\n * };\n *\n * // enable automatic keeping track of state and the callback hook\n * toggler.start();\n *\n * // ... at some point later, maybe in response to a UI event, update the state;\n * // the callback will be invoked then the value changes\n * toggler.value(1);\n */\nclass ControlToggler {\n  /**\n   * Constructor.\n   * @param {NodeInstructionUrlHelper} urlHelper the URL helper to use, which must support node instructions with the `NodeInstructionUrlHelperMixin`\n   *                    and be configured with the `nodeId` property for the node to be managed\n   * @param {AuthorizationV2Builder} authBuilder the auth builder to authenticate requests with; the required credentials\n   *                                             must be set appropriately\n   * @param {string} controlId the ID of the control to manage\n   * @param {NodeDatumUrlHelper} [queryUrlHelper] a URL helper for accessing node datum via SolarQuery; if not provided one\n   *                                              will be created using the `environment` from `urlHelper`\n   */\n  constructor(urlHelper, authBuilder, controlId, queryUrlHelper) {\n    /**\n     * The URL helper to use, which must support node instructions with the `NodeInstructionUrlHelperMixin`\n     * and be configured with the `nodeId` property for the node to be managed.\n     * @type {NodeInstructionUrlHelper}\n     */\n    this.instructionUrlHelper = urlHelper;\n\n    /**\n     * The auth builder to use for authorizing requets. The credentials must be configured to support\n     * posting instructions and viewing the data for the configured `controlId`.\n     * @type {AuthorizationV2Builder}\n     */\n    this.authBuilder =\n      authBuilder ||\n      new AuthorizationV2Builder(\n        null,\n        urlHelper ? urlHelper.environment : undefined\n      );\n\n    /**\n     * The control ID to manage.\n     * @type {string}\n     */\n    this.controlId = controlId;\n\n    /**\n     * The SolarQuery URL helper.\n     * @type {NodeDatumUrlHelper}\n     */\n    this.queryUrlHelper =\n      queryUrlHelper || new NodeDatumUrlHelper(urlHelper.environment);\n\n    // force the nodeId / sourceId to our controlId\n    this.queryUrlHelper.nodeId = urlHelper.nodeId;\n    this.queryUrlHelper.sourceId = controlId;\n\n    /**\n     * A timer ID for refreshing the local state.\n     * @type {number}\n     * @private\n     */\n    this.timer = null;\n\n    /**\n     * The last known instruction status. The `val` property indicates the control value.\n     * @type {ControlDatum}\n     * @private\n     */\n    this.lastKnownDatum = undefined;\n\n    /**\n     * The last known instruction object.\n     * @type {Instruction}\n     * @private\n     */\n    this.lastKnownInstruction = undefined;\n\n    /**\n     * The refresh rate, in milliseconds.\n     * Defaults to 20 seconds.\n     * @type {number}\n     */\n    this.refreshMs = 20000;\n\n    /**\n     * The refresh rate, in milliseconds, when a toggle instruction is queued.\n     * Defaults to 5 seconds.\n     * @type {number}\n     */\n    this.pendingRefreshMs = 5000;\n\n    /**\n     * A callback function, which is called after the state of the control changes.\n     * The `this` reference will be set to this object. If an error has occurred,\n     * the error will be passed as the first argument.\n     *\n     * @type {function}\n     */\n    this.callback = undefined;\n  }\n\n  notifyDelegate(error) {\n    const callback = this.callback;\n    if (callback !== undefined) {\n      try {\n        callback.call(self, error);\n      } catch (callbackError) {\n        log.error(\"Error in callback: %s\", callbackError);\n      }\n    }\n  }\n\n  /**\n   * Find an active `SetControlParameterInstruction` for the configured `controlId`.\n   *\n   * @param {Instruction[]} data array of instructions\n   * @returns {Instruction} the active instruction, or `undefined`\n   * @private\n   */\n  getActiveInstruction(data) {\n    if (!Array.isArray(data) || data.length === 0) {\n      return undefined;\n    }\n    const controlId = this.controlId;\n    var instruction = data.reduce((prev, curr) => {\n      if (\n        curr.topic === SetControlParameterInstructionName &&\n        Array.isArray(curr.parameters) &&\n        curr.parameters.length > 0 &&\n        curr.parameters[0].name === controlId &&\n        (prev === undefined || prev.created < curr.created)\n      ) {\n        return curr;\n      }\n      return prev;\n    }, undefined);\n    if (instruction !== undefined) {\n      log.debug(\n        \"Active instruction for %d found in state %s (set control %s to %s)\",\n        this.instructionUrlHelper.nodeId,\n        instruction.state,\n        controlId,\n        instruction.parameters[0].value\n      );\n    }\n    return instruction;\n  }\n\n  /**\n   * Get the last know instruction state, if available.\n   * @returns {InstructionState} the last known instruction state, or `undefined`\n   * @private\n   */\n  lastKnownInstructionState() {\n    const lastKnownInstruction = this.lastKnownInstruction;\n    return lastKnownInstruction === undefined\n      ? undefined\n      : InstructionState.valueOf(lastKnownInstruction.state);\n  }\n\n  /**\n   * Get the last known instruction value, e.g. the state of the control.\n   * @returns {number} the last know value of the control (0 or 1), or `undefined`\n   * @private\n   */\n  lastKnownInstructionValue() {\n    const lastKnownInstruction = this.lastKnownInstruction;\n    return lastKnownInstruction === undefined\n      ? undefined\n      : Number(lastKnownInstruction.parameters[0].value);\n  }\n\n  /**\n   * Calculate the refresh rate to use.\n   * @returns {number} the refresh rate to use, in milliseconds\n   * @private\n   */\n  currentRefreshMs() {\n    return this.hasPendingStateChange ? this.pendingRefreshMs : this.refreshMs;\n  }\n\n  /**\n   * Test if a state change is pending confirmation.\n   *\n   * @returns {boolean} `true` if a state change is pending (not complete)\n   */\n  get hasPendingStateChange() {\n    return InstructionActiveStates.has(this.lastKnownInstructionState());\n  }\n\n  /**\n   * Return the value from either the `controlStatus` or the first parameter value of an `instruction`,\n   * whichever is valid and more recent.\n   *\n   * @param {ControlDatum} controlDatum a control status object\n   * @param {Instruction} instruction  an instruction object\n   * @returns {number} the control status value\n   * @private\n   */\n  mostRecentValue(controlDatum, instruction) {\n    if (!instruction || InstructionStates.Declined.equals(instruction.status)) {\n      return controlDatum ? controlDatum.val : undefined;\n    } else if (!controlDatum) {\n      return Number(instruction.parameters[0].value);\n    }\n    // return the newer value\n    const statusDate = dateParser(controlDatum.created);\n    const instructionDate = dateParser(instruction.created);\n    return statusDate.getTime() > instructionDate.getTime()\n      ? controlDatum.val\n      : Number(instruction.parameters[0].value);\n  }\n\n  /**\n   * Handle the authentication for a request.\n   *\n   * <p>If the `url` contains query parameters and the `GET`` request is **not** used,\n   * the `HttpContentType.FORM_URLENCODED` content type will be assumed.</p>\n   *\n   * @param {XMLHttpRequest} request the XHR\n   * @param {string} method the HTTP method\n   * @param {string} url the URL\n   * @param {string} [contentType] a HTTP content type to use\n   * @returns {void}\n   * @private\n   */\n  handleRequestAuth(request, method, url, contentType) {\n    const now = new Date();\n    this.authBuilder\n      .reset()\n      .date(now)\n      .snDate(true)\n      .method(method)\n      .url(url);\n    if (contentType) {\n      this.authBuilder.contentType(contentType);\n    }\n    request.setRequestHeader(\n      HttpHeaders.X_SN_DATE,\n      this.authBuilder.requestDateHeaderValue\n    );\n    request.setRequestHeader(\n      HttpHeaders.AUTHORIZATION,\n      this.authBuilder.buildWithSavedKey()\n    );\n  }\n\n  /**\n   * Defer a JSON request on a queue.\n   *\n   * <p>If the `url` contains query parameters and the `GET`` method is **not** used,\n   * the query parameters will be removed fom the URL and posted on the request body\n   * instead, using the `HttpContentType.FORM_URLENCODED` content type.</p>\n   *\n   * @param {Queue} q the queue to defer with\n   * @param {string} method the HTTP method\n   * @param {string} url the URL\n   * @returns {ControlToggler} this object\n   * @private\n   */\n  deferJsonRequestWithAuth(q, method, url) {\n    let queryIndex = -1;\n    let reqData = undefined;\n    let contentType = undefined;\n    if (method !== HttpMethod.GET) {\n      queryIndex = url.indexOf(\"?\");\n      reqData = url.substring(queryIndex + 1);\n      contentType = HttpContentType.FORM_URLENCODED_UTF8;\n    }\n    const req = xhrRequest(queryIndex >= 0 ? url.substring(0, queryIndex) : url)\n      .mimeType(HttpContentType.APPLICATION_JSON)\n      .on(\"beforesend\", request => {\n        this.handleRequestAuth(request, method, url, contentType);\n      });\n    if (contentType) {\n      req.header(\"Content-Type\", contentType);\n    }\n    q.defer(req.send, method, reqData);\n    return this;\n  }\n\n  /**\n   * Get or set the desired control value.\n   *\n   * @param {number} [desiredValue] the control value to set\n   * @returns {number|ControlToggler} when called as a getter, the last known control value; when called as a\n   *                                  setter, this object\n   */\n  value(desiredValue) {\n    if (!arguments.length)\n      return this.lastKnownDatum === undefined\n        ? undefined\n        : this.lastKnownDatum.val;\n    if (!this.authBuilder.signingKeyValid) {\n      throw new Error(\"Valid credentials not configured\");\n    }\n    const controlId = this.controlId;\n    const instrUrlHelper = this.instructionUrlHelper;\n    const q = queue();\n    var currentValue =\n      this.lastKnownDatum === undefined ? undefined : this.lastKnownDatum.val;\n    var pendingState = this.lastKnownInstructionState();\n    var pendingValue = this.lastKnownInstructionValue();\n    if (\n      pendingState === InstructionStates.Queued &&\n      pendingValue !== desiredValue\n    ) {\n      // cancel the pending instruction\n      log.debug(\n        \"Canceling %d pending control %s switch to %s\",\n        instrUrlHelper.nodeId,\n        controlId,\n        pendingValue\n      );\n      const cancelInstructionUrl = instrUrlHelper.updateInstructionStateUrl(\n        this.lastKnownInstruction.id,\n        InstructionStates.Declined\n      );\n      this.deferJsonRequestWithAuth(q, HttpMethod.POST, cancelInstructionUrl);\n      this.lastKnownInstruction = undefined;\n      pendingState = undefined;\n      pendingValue = undefined;\n    }\n    if (currentValue !== desiredValue && pendingValue !== desiredValue) {\n      log.debug(\n        \"Request %d to change control %s to %d\",\n        instrUrlHelper.nodeId,\n        controlId,\n        desiredValue\n      );\n      const queueInstructionUrl = instrUrlHelper.queueInstructionUrl(\n        SetControlParameterInstructionName,\n        [{ name: controlId, value: String(desiredValue) }]\n      );\n      this.deferJsonRequestWithAuth(q, HttpMethod.POST, queueInstructionUrl);\n    }\n    q.awaitAll((error, results) => {\n      if (error) {\n        log.error(\n          \"Error updating %d control toggler %s: %s\",\n          instrUrlHelper.nodeId,\n          controlId,\n          error.status\n        );\n        this.notifyDelegate(error);\n        return;\n      }\n      if (results.length < 1) {\n        // we queued nothing\n        return;\n      }\n      results.forEach((e, i) => {\n        if (e.responseText) {\n          results[i] = JSON.parse(e.responseText);\n        }\n      });\n      const cancelResult = results[0];\n      // note == null check here, which handles either undefined or null\n      if (cancelResult.data == null && cancelResult.success === true) {\n        // it was cancelled\n        this.lastKnownInstruction = undefined;\n      }\n      const instructionResult = results[results.length - 1].data;\n      if (!(instructionResult == null)) {\n        // this is the last know instruction now\n        this.lastKnownInstruction = instructionResult;\n      }\n\n      // invoke the client callback so they know the instruction state has changed\n      this.notifyDelegate();\n\n      // reset timer to start polling at pendingRefreshMs rate\n      if (this.timer) {\n        this.stop();\n        this.start(this.currentRefreshMs());\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Refresh the control state from SolarNetwork.\n   *\n   * Once the {@link ControlToggler#start} method is called, this method is invoked periodically\n   * automatically. Only call this directly if you need to manually update the state of the control.\n   *\n   * @returns {ControlToggler} this object\n   */\n  update() {\n    if (!this.authBuilder.signingKeyValid) {\n      throw new Error(\"Valid credentials not configured\");\n    }\n    const controlId = this.controlId;\n    const instrUrlHelper = this.instructionUrlHelper;\n    const queryUrlHelper = this.queryUrlHelper;\n    const q = queue();\n\n    // query for most recently available datum for control to check control value\n    const mostRecentUrl = queryUrlHelper.mostRecentDatumUrl();\n    this.deferJsonRequestWithAuth(q, HttpMethod.GET, mostRecentUrl);\n\n    // query for pending instructions to see if we have an in-flight SetControlParameter on the go already\n    const viewPendingUrl = instrUrlHelper.viewPendingInstructionsUrl();\n    this.deferJsonRequestWithAuth(q, HttpMethod.GET, viewPendingUrl);\n\n    if (\n      this.lastKnownInstruction &&\n      !InstructionFinishedStates.has(this.lastKnownInstructionState())\n    ) {\n      // also refresh this specific instruction, to know when it goes to Completed so we can\n      // assume the control value has changed, even if the mostRecent data lags behind\n      const viewInstructionUrl = instrUrlHelper.viewInstructionUrl(\n        this.lastKnownInstruction.id\n      );\n      this.deferJsonRequestWithAuth(q, HttpMethod.GET, viewInstructionUrl);\n    }\n\n    q.awaitAll((error, results) => {\n      if (error) {\n        log.error(\n          \"Error querying %d control toggler %s status: %s\",\n          instrUrlHelper.nodeId,\n          controlId,\n          error.status\n        );\n        this.notifyDelegate(error);\n      } else {\n        results.forEach((e, i) => {\n          if (e.responseText) {\n            results[i] = JSON.parse(e.responseText);\n          }\n        });\n        let mostRecentDatum, active, executing;\n        if (results.length > 0) {\n          mostRecentDatum = results[0];\n        }\n        if (results.length > 1) {\n          active = results[1];\n        }\n        if (results.length > 2) {\n          executing = results[2];\n        }\n        // get current status of control via most recent datum\n        /** @type {ControlDatum} */\n        let mostRecentControlDatum = undefined;\n        if (\n          mostRecentDatum.data &&\n          Array.isArray(mostRecentDatum.data.results)\n        ) {\n          mostRecentControlDatum = mostRecentDatum.data.results.find(\n            e => e.sourceId === controlId\n          );\n        }\n\n        // get active (pending) instruction (if any)\n        const execInstruction = executing ? executing.data : undefined;\n        const pendingInstruction = active\n          ? this.getActiveInstruction(active.data)\n          : undefined;\n        const newValue = this.mostRecentValue(\n          mostRecentControlDatum,\n          execInstruction\n            ? execInstruction\n            : pendingInstruction\n            ? pendingInstruction\n            : this.lastKnownInstruction\n        );\n        const currValue = this.value();\n        if (newValue !== currValue || execInstruction) {\n          log.debug(\n            \"Current %d control %s value is %s\",\n            instrUrlHelper.nodeId,\n            controlId,\n            newValue !== undefined ? newValue : \"N/A\"\n          );\n          this.lastKnownDatum = mostRecentControlDatum;\n          if (this.lastKnownDatum && !pendingInstruction) {\n            this.lastKnownDatum.val = newValue; // force this, because instruction value might be newer than status value\n          }\n          this.lastKnownInstruction = execInstruction\n            ? execInstruction\n            : pendingInstruction;\n\n          // invoke the client callback so they know the data has been updated\n          this.notifyDelegate();\n        }\n      }\n\n      // if timer was defined, keep going as if interval set\n      if (this.timer !== undefined) {\n        this.timer = setTimeout(() => {\n          this.update();\n        }, this.currentRefreshMs());\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Start automatically updating the status of the configured control.\n   *\n   * @param {number} [when=20] an optional offset in milliseconds to start at\n   * @returns {ControlToggler} this object\n   */\n  start(when) {\n    const timer = this.timer;\n    if (!timer) {\n      this.timer = setTimeout(() => {\n        this.update();\n      }, when || 20);\n    }\n    return this;\n  }\n\n  /**\n   * Stop automatically updating the status of the configured control.\n   *\n   * @returns {ControlToggler} this object\n   */\n  stop() {\n    const timer = this.timer;\n    if (timer) {\n      clearTimeout(timer);\n      this.timer = null;\n    }\n    return this;\n  }\n}\n\nexport default ControlToggler;\n"]}