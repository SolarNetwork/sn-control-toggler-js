{"version":3,"file":"solarnetwork-control-toggler.js","sources":["../src/controlToggler.js"],"sourcesContent":["import { request as xhrRequest } from \"d3-request\";\nimport { queue } from \"d3-queue\";\nimport {\n  AuthorizationV2Builder,\n  dateParser,\n  HttpContentType,\n  HttpHeaders,\n  HttpMethod,\n  InstructionState,\n  InstructionStates,\n  Logger as log,\n  NodeDatumUrlHelper\n} from \"solarnetwork-api-core\";\n\nconst SetControlParameterInstructionName = \"SetControlParameter\";\n\n/**\n * Instruction states that indicate a toggle instruction is in-flight.\n * @type {Set}\n * @private\n */\nconst InstructionActiveStates = new Set([\n  InstructionStates.Queued,\n  InstructionStates.Received,\n  InstructionStates.Executing\n]);\n\n/**\n * Instruction states that indicate a toggle instruction is comleted or declined.\n * @type {Set}\n * @private\n */\nconst InstructionFinishedStates = new Set([\n  InstructionStates.Completed,\n  InstructionStates.Declined\n]);\n\n/**\n * @typedef {Object} ControlDatum\n * @property {string} created the datum date\n * @property {string} sourceId the control ID\n * @property {number} val the control value, essentially `0` or `1`\n */\n\n/**\n * @typedef {Object} InstructionParameter\n * @property {string} name the parameter name\n * @property {string} value the parameter value\n */\n\n/**\n * @typedef {Object} Instruction\n * @property {number} id the unique ID of the instruction\n * @property {string} created the instruction date\n * @property {string} status an `InstructionStatus` name value\n * @property {InstructionParameter[]} [parameters] the instruction parameters\n */\n\n/**\n * The status callback function.\n *\n * This function will be invoked whenever the control value has changed. Additionally, it will be\n * invoked periodically while a state change has not been completed, even if the control value\n * has not changed. Use {@link ControlToggler#value} to get the current control value and\n * {@link ControlToggler#hasPendingStateChange} to test if that value is still pending.\n *\n * @callback ControlToggler~statusCallback\n * @this ControlToggler\n * @param {Error} [error] an error if a failure occurred\n */\n\n/**\n * Manage the state of a boolean control switch using SolarNetwork `SetControlParameter` instructions.\n *\n * Use an instance of this class to keep track of, and update the state of, a single switch-like\n * control configured on a SolarNode. Because updating the state of a control is an asynchronous\n * process involving multiple steps, this class simplifies this with a simple callback API that\n * will be invoked whenever the control value changes.\n *\n * Once the {@link ControlToggler#start} method has been called, the toggler will make periodic\n * calls to SolarNetwork to get the most recent value for the configured control ID, which it\n * treats as a {@link ControlDatum} `sourceId` value. Thus if some other process changes the\n * control, the toggler will eventually pick up that change and invoke the callback function.\n *\n * @example\n * const urlHelper = new NodeInstructionUrlHelper();\n * urlHelper.nodeId = 123;\n *\n * const auth = new TestAuthBuilder('token');\n * auth.saveSigningKey('secret');\n *\n * const toggler = new ControlTogger(urlHelper, auth, '/power/switch/1');\n * toggler.callback = function(error) {\n *   // invoked when instruction states change, or the control value changes\n *   console.log(`Control ${toggler.controlId} value == ${toggler.value()}; pending == ${toggler.hasPendingStateChange}`);\n * };\n *\n * // enable automatic keeping track of state and the callback hook\n * toggler.start();\n *\n * // ... at some point later, maybe in response to a UI event, update the state;\n * // the callback will be invoked then the value changes\n * toggler.value(1);\n */\nclass ControlToggler {\n  /**\n   * Constructor.\n   * @param {NodeInstructionUrlHelper} urlHelper the URL helper to use, which must support node instructions with the `NodeInstructionUrlHelperMixin`\n   *                    and be configured with the `nodeId` property for the node to be managed\n   * @param {AuthorizationV2Builder} authBuilder the auth builder to authenticate requests with; the required credentials\n   *                                             must be set appropriately\n   * @param {string} controlId the ID of the control to manage\n   * @param {NodeDatumUrlHelper} [queryUrlHelper] a URL helper for accessing node datum via SolarQuery; if not provided one\n   *                                              will be created using the `environment` from `urlHelper`\n   */\n  constructor(urlHelper, authBuilder, controlId, queryUrlHelper) {\n    /**\n     * The URL helper to use, which must support node instructions with the `NodeInstructionUrlHelperMixin`\n     * and be configured with the `nodeId` property for the node to be managed.\n     * @type {NodeInstructionUrlHelper}\n     */\n    this.instructionUrlHelper = urlHelper;\n\n    /**\n     * The auth builder to use for authorizing requets. The credentials must be configured to support\n     * posting instructions and viewing the data for the configured `controlId`.\n     * @type {AuthorizationV2Builder}\n     */\n    this.authBuilder =\n      authBuilder ||\n      new AuthorizationV2Builder(\n        null,\n        urlHelper ? urlHelper.environment : undefined\n      );\n\n    /**\n     * The control ID to manage.\n     * @type {string}\n     */\n    this.controlId = controlId;\n\n    /**\n     * The SolarQuery URL helper.\n     * @type {NodeDatumUrlHelper}\n     */\n    this.queryUrlHelper =\n      queryUrlHelper || new NodeDatumUrlHelper(urlHelper.environment);\n\n    // force the nodeId / sourceId to our controlId\n    this.queryUrlHelper.nodeId = urlHelper.nodeId;\n    this.queryUrlHelper.sourceId = controlId;\n\n    /**\n     * A timer ID for refreshing the local state.\n     * @type {number}\n     * @private\n     */\n    this.timer = null;\n\n    /**\n     * The last known instruction status. The `val` property indicates the control value.\n     * @type {ControlDatum}\n     * @private\n     */\n    this.lastKnownDatum = undefined;\n\n    /**\n     * The last known instruction object.\n     * @type {Instruction}\n     * @private\n     */\n    this.lastKnownInstruction = undefined;\n\n    /**\n     * The refresh rate, in milliseconds.\n     * Defaults to 20 seconds.\n     * @type {number}\n     */\n    this.refreshMs = 20000;\n\n    /**\n     * The refresh rate, in milliseconds, when a toggle instruction is queued.\n     * Defaults to 5 seconds.\n     * @type {number}\n     */\n    this.pendingRefreshMs = 5000;\n\n    /**\n     * A callback function, which is called after the state of the control changes.\n     * The `this` reference will be set to this object. If an error has occurred,\n     * the error will be passed as the first argument.\n     *\n     * @type {function}\n     */\n    this.callback = undefined;\n  }\n\n  notifyDelegate(error) {\n    const callback = this.callback;\n    if (callback !== undefined) {\n      try {\n        callback.call(self, error);\n      } catch (callbackError) {\n        log.error(\"Error in callback: %s\", callbackError);\n      }\n    }\n  }\n\n  /**\n   * Find an active `SetControlParameterInstruction` for the configured `controlId`.\n   *\n   * @param {Instruction[]} data array of instructions\n   * @returns {Instruction} the active instruction, or `undefined`\n   * @private\n   */\n  getActiveInstruction(data) {\n    if (!Array.isArray(data) || data.length === 0) {\n      return undefined;\n    }\n    const controlId = this.controlId;\n    var instruction = data.reduce((prev, curr) => {\n      if (\n        curr.topic === SetControlParameterInstructionName &&\n        Array.isArray(curr.parameters) &&\n        curr.parameters.length > 0 &&\n        curr.parameters[0].name === controlId &&\n        (prev === undefined || prev.created < curr.created)\n      ) {\n        return curr;\n      }\n      return prev;\n    }, undefined);\n    if (instruction !== undefined) {\n      log.debug(\n        \"Active instruction for %d found in state %s (set control %s to %s)\",\n        this.instructionUrlHelper.nodeId,\n        instruction.state,\n        controlId,\n        instruction.parameters[0].value\n      );\n    }\n    return instruction;\n  }\n\n  /**\n   * Get the last know instruction state, if available.\n   * @returns {InstructionState} the last known instruction state, or `undefined`\n   * @private\n   */\n  lastKnownInstructionState() {\n    const lastKnownInstruction = this.lastKnownInstruction;\n    return lastKnownInstruction === undefined\n      ? undefined\n      : InstructionState.valueOf(lastKnownInstruction.state);\n  }\n\n  /**\n   * Get the last known instruction value, e.g. the state of the control.\n   * @returns {number} the last know value of the control (0 or 1), or `undefined`\n   * @private\n   */\n  lastKnownInstructionValue() {\n    const lastKnownInstruction = this.lastKnownInstruction;\n    return lastKnownInstruction === undefined\n      ? undefined\n      : Number(lastKnownInstruction.parameters[0].value);\n  }\n\n  /**\n   * Calculate the refresh rate to use.\n   * @returns {number} the refresh rate to use, in milliseconds\n   * @private\n   */\n  currentRefreshMs() {\n    return this.hasPendingStateChange ? this.pendingRefreshMs : this.refreshMs;\n  }\n\n  /**\n   * Test if a state change is pending confirmation.\n   *\n   * @returns {boolean} `true` if a state change is pending (not complete)\n   */\n  get hasPendingStateChange() {\n    return InstructionActiveStates.has(this.lastKnownInstructionState());\n  }\n\n  /**\n   * Return the value from either the `controlStatus` or the first parameter value of an `instruction`,\n   * whichever is valid and more recent.\n   *\n   * @param {ControlDatum} controlDatum a control status object\n   * @param {Instruction} instruction  an instruction object\n   * @returns {number} the control status value\n   * @private\n   */\n  mostRecentValue(controlDatum, instruction) {\n    if (!instruction || InstructionStates.Declined.equals(instruction.status)) {\n      return controlDatum ? controlDatum.val : undefined;\n    } else if (!controlDatum) {\n      return Number(instruction.parameters[0].value);\n    }\n    // return the newer value\n    const statusDate = dateParser(controlDatum.created);\n    const instructionDate = dateParser(instruction.created);\n    return statusDate.getTime() > instructionDate.getTime()\n      ? controlDatum.val\n      : Number(instruction.parameters[0].value);\n  }\n\n  /**\n   * Handle the authentication for a request.\n   *\n   * <p>If the `url` contains query parameters and the `GET`` request is **not** used,\n   * the `HttpContentType.FORM_URLENCODED` content type will be assumed.</p>\n   *\n   * @param {XMLHttpRequest} request the XHR\n   * @param {string} method the HTTP method\n   * @param {string} url the URL\n   * @param {string} [contentType] a HTTP content type to use\n   * @returns {void}\n   * @private\n   */\n  handleRequestAuth(request, method, url, contentType) {\n    const now = new Date();\n    this.authBuilder\n      .reset()\n      .date(now)\n      .snDate(true)\n      .method(method)\n      .url(url);\n    if (contentType) {\n      this.authBuilder.contentType(contentType);\n    }\n    request.setRequestHeader(\n      HttpHeaders.X_SN_DATE,\n      this.authBuilder.requestDateHeaderValue\n    );\n    request.setRequestHeader(\n      HttpHeaders.AUTHORIZATION,\n      this.authBuilder.buildWithSavedKey()\n    );\n  }\n\n  /**\n   * Defer a JSON request on a queue.\n   *\n   * <p>If the `url` contains query parameters and the `GET`` method is **not** used,\n   * the query parameters will be removed fom the URL and posted on the request body\n   * instead, using the `HttpContentType.FORM_URLENCODED` content type.</p>\n   *\n   * @param {Queue} q the queue to defer with\n   * @param {string} method the HTTP method\n   * @param {string} url the URL\n   * @returns {ControlToggler} this object\n   * @private\n   */\n  deferJsonRequestWithAuth(q, method, url) {\n    let queryIndex = -1;\n    let reqData = undefined;\n    let contentType = undefined;\n    if (method !== HttpMethod.GET) {\n      queryIndex = url.indexOf(\"?\");\n      reqData = url.substring(queryIndex + 1);\n      contentType = HttpContentType.FORM_URLENCODED_UTF8;\n    }\n    const req = xhrRequest(queryIndex >= 0 ? url.substring(0, queryIndex) : url)\n      .mimeType(HttpContentType.APPLICATION_JSON)\n      .on(\"beforesend\", request => {\n        this.handleRequestAuth(request, method, url, contentType);\n      });\n    if (contentType) {\n      req.header(\"Content-Type\", contentType);\n    }\n    q.defer(req.send, method, reqData);\n    return this;\n  }\n\n  /**\n   * Get or set the desired control value.\n   *\n   * @param {number} [desiredValue] the control value to set\n   * @returns {number|ControlToggler} when called as a getter, the last known control value; when called as a\n   *                                  setter, this object\n   */\n  value(desiredValue) {\n    if (!arguments.length)\n      return this.lastKnownDatum === undefined\n        ? undefined\n        : this.lastKnownDatum.val;\n    if (!this.authBuilder.signingKeyValid) {\n      throw new Error(\"Valid credentials not configured\");\n    }\n    const controlId = this.controlId;\n    const instrUrlHelper = this.instructionUrlHelper;\n    const q = queue();\n    var currentValue =\n      this.lastKnownDatum === undefined ? undefined : this.lastKnownDatum.val;\n    var pendingState = this.lastKnownInstructionState();\n    var pendingValue = this.lastKnownInstructionValue();\n    if (\n      pendingState === InstructionStates.Queued &&\n      pendingValue !== desiredValue\n    ) {\n      // cancel the pending instruction\n      log.debug(\n        \"Canceling %d pending control %s switch to %s\",\n        instrUrlHelper.nodeId,\n        controlId,\n        pendingValue\n      );\n      const cancelInstructionUrl = instrUrlHelper.updateInstructionStateUrl(\n        this.lastKnownInstruction.id,\n        InstructionStates.Declined\n      );\n      this.deferJsonRequestWithAuth(q, HttpMethod.POST, cancelInstructionUrl);\n      this.lastKnownInstruction = undefined;\n      pendingState = undefined;\n      pendingValue = undefined;\n    }\n    if (currentValue !== desiredValue && pendingValue !== desiredValue) {\n      log.debug(\n        \"Request %d to change control %s to %d\",\n        instrUrlHelper.nodeId,\n        controlId,\n        desiredValue\n      );\n      const queueInstructionUrl = instrUrlHelper.queueInstructionUrl(\n        SetControlParameterInstructionName,\n        [{ name: controlId, value: String(desiredValue) }]\n      );\n      this.deferJsonRequestWithAuth(q, HttpMethod.POST, queueInstructionUrl);\n    }\n    q.awaitAll((error, results) => {\n      if (error) {\n        log.error(\n          \"Error updating %d control toggler %s: %s\",\n          instrUrlHelper.nodeId,\n          controlId,\n          error.status\n        );\n        this.notifyDelegate(error);\n        return;\n      }\n      if (results.length < 1) {\n        // we queued nothing\n        return;\n      }\n      results.forEach((e, i) => {\n        if (e.responseText) {\n          results[i] = JSON.parse(e.responseText);\n        }\n      });\n      const cancelResult = results[0];\n      // note == null check here, which handles either undefined or null\n      if (cancelResult.data == null && cancelResult.success === true) {\n        // it was cancelled\n        this.lastKnownInstruction = undefined;\n      }\n      const instructionResult = results[results.length - 1].data;\n      if (!(instructionResult == null)) {\n        // this is the last know instruction now\n        this.lastKnownInstruction = instructionResult;\n      }\n\n      // invoke the client callback so they know the instruction state has changed\n      this.notifyDelegate();\n\n      // reset timer to start polling at pendingRefreshMs rate\n      if (this.timer) {\n        this.stop();\n        this.start(this.currentRefreshMs());\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Refresh the control state from SolarNetwork.\n   *\n   * Once the {@link ControlToggler#start} method is called, this method is invoked periodically\n   * automatically. Only call this directly if you need to manually update the state of the control.\n   *\n   * @returns {ControlToggler} this object\n   */\n  update() {\n    if (!this.authBuilder.signingKeyValid) {\n      throw new Error(\"Valid credentials not configured\");\n    }\n    const controlId = this.controlId;\n    const instrUrlHelper = this.instructionUrlHelper;\n    const queryUrlHelper = this.queryUrlHelper;\n    const q = queue();\n\n    // query for most recently available datum for control to check control value\n    const mostRecentUrl = queryUrlHelper.mostRecentDatumUrl();\n    this.deferJsonRequestWithAuth(q, HttpMethod.GET, mostRecentUrl);\n\n    // query for pending instructions to see if we have an in-flight SetControlParameter on the go already\n    const viewPendingUrl = instrUrlHelper.viewPendingInstructionsUrl();\n    this.deferJsonRequestWithAuth(q, HttpMethod.GET, viewPendingUrl);\n\n    if (\n      this.lastKnownInstruction &&\n      !InstructionFinishedStates.has(this.lastKnownInstructionState())\n    ) {\n      // also refresh this specific instruction, to know when it goes to Completed so we can\n      // assume the control value has changed, even if the mostRecent data lags behind\n      const viewInstructionUrl = instrUrlHelper.viewInstructionUrl(\n        this.lastKnownInstruction.id\n      );\n      this.deferJsonRequestWithAuth(q, HttpMethod.GET, viewInstructionUrl);\n    }\n\n    q.awaitAll((error, results) => {\n      if (error) {\n        log.error(\n          \"Error querying %d control toggler %s status: %s\",\n          instrUrlHelper.nodeId,\n          controlId,\n          error.status\n        );\n        this.notifyDelegate(error);\n      } else {\n        results.forEach((e, i) => {\n          if (e.responseText) {\n            results[i] = JSON.parse(e.responseText);\n          }\n        });\n        let mostRecentDatum, active, executing;\n        if (results.length > 0) {\n          mostRecentDatum = results[0];\n        }\n        if (results.length > 1) {\n          active = results[1];\n        }\n        if (results.length > 2) {\n          executing = results[2];\n        }\n        // get current status of control via most recent datum\n        /** @type {ControlDatum} */\n        let mostRecentControlDatum = undefined;\n        if (\n          mostRecentDatum.data &&\n          Array.isArray(mostRecentDatum.data.results)\n        ) {\n          mostRecentControlDatum = mostRecentDatum.data.results.find(\n            e => e.sourceId === controlId\n          );\n        }\n\n        // get active (pending) instruction (if any)\n        const execInstruction = executing ? executing.data : undefined;\n        const pendingInstruction = active\n          ? this.getActiveInstruction(active.data)\n          : undefined;\n        const newValue = this.mostRecentValue(\n          mostRecentControlDatum,\n          execInstruction\n            ? execInstruction\n            : pendingInstruction\n            ? pendingInstruction\n            : this.lastKnownInstruction\n        );\n        const currValue = this.value();\n        if (newValue !== currValue || execInstruction) {\n          log.debug(\n            \"Current %d control %s value is %s\",\n            instrUrlHelper.nodeId,\n            controlId,\n            newValue !== undefined ? newValue : \"N/A\"\n          );\n          this.lastKnownDatum = mostRecentControlDatum;\n          if (this.lastKnownDatum && !pendingInstruction) {\n            this.lastKnownDatum.val = newValue; // force this, because instruction value might be newer than status value\n          }\n          this.lastKnownInstruction = execInstruction\n            ? execInstruction\n            : pendingInstruction;\n\n          // invoke the client callback so they know the data has been updated\n          this.notifyDelegate();\n        }\n      }\n\n      // if timer was defined, keep going as if interval set\n      if (this.timer !== undefined) {\n        this.timer = setTimeout(() => {\n          this.update();\n        }, this.currentRefreshMs());\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Start automatically updating the status of the configured control.\n   *\n   * @param {number} [when=20] an optional offset in milliseconds to start at\n   * @returns {ControlToggler} this object\n   */\n  start(when) {\n    const timer = this.timer;\n    if (!timer) {\n      this.timer = setTimeout(() => {\n        this.update();\n      }, when || 20);\n    }\n    return this;\n  }\n\n  /**\n   * Stop automatically updating the status of the configured control.\n   *\n   * @returns {ControlToggler} this object\n   */\n  stop() {\n    const timer = this.timer;\n    if (timer) {\n      clearTimeout(timer);\n      this.timer = null;\n    }\n    return this;\n  }\n}\n\nexport default ControlToggler;\n"],"names":["SetControlParameterInstructionName","InstructionActiveStates","Set","InstructionStates","Queued","Received","Executing","InstructionFinishedStates","Completed","Declined","ControlToggler","urlHelper","authBuilder","controlId","queryUrlHelper","instructionUrlHelper","AuthorizationV2Builder","environment","undefined","NodeDatumUrlHelper","nodeId","sourceId","timer","lastKnownDatum","lastKnownInstruction","refreshMs","pendingRefreshMs","callback","error","call","self","callbackError","log","data","Array","isArray","length","instruction","reduce","prev","curr","topic","parameters","name","created","debug","state","value","InstructionState","valueOf","Number","hasPendingStateChange","controlDatum","equals","status","val","statusDate","dateParser","instructionDate","getTime","request","method","url","contentType","now","Date","reset","date","snDate","setRequestHeader","HttpHeaders","X_SN_DATE","requestDateHeaderValue","AUTHORIZATION","buildWithSavedKey","q","queryIndex","reqData","HttpMethod","GET","indexOf","substring","HttpContentType","FORM_URLENCODED_UTF8","req","xhrRequest","mimeType","APPLICATION_JSON","on","handleRequestAuth","header","defer","send","desiredValue","arguments","signingKeyValid","Error","instrUrlHelper","queue","currentValue","pendingState","lastKnownInstructionState","pendingValue","lastKnownInstructionValue","cancelInstructionUrl","updateInstructionStateUrl","id","deferJsonRequestWithAuth","POST","queueInstructionUrl","String","awaitAll","results","notifyDelegate","forEach","e","i","responseText","JSON","parse","cancelResult","success","instructionResult","stop","start","currentRefreshMs","mostRecentUrl","mostRecentDatumUrl","viewPendingUrl","viewPendingInstructionsUrl","has","viewInstructionUrl","mostRecentDatum","active","executing","mostRecentControlDatum","find","execInstruction","pendingInstruction","getActiveInstruction","newValue","mostRecentValue","currValue","setTimeout","update","when","clearTimeout"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAcA,IAAMA,kCAAkC,GAAG,qBAA3C;EAEA;;;;;;EAKA,IAAMC,uBAAuB,GAAG,IAAIC,GAAJ,CAAQ,CACtCC,qCAAiB,CAACC,MADoB,EAEtCD,qCAAiB,CAACE,QAFoB,EAGtCF,qCAAiB,CAACG,SAHoB,CAAR,CAAhC;EAMA;;;;;;EAKA,IAAMC,yBAAyB,GAAG,IAAIL,GAAJ,CAAQ,CACxCC,qCAAiB,CAACK,SADsB,EAExCL,qCAAiB,CAACM,QAFsB,CAAR,CAAlC;EAKA;;;;;;;EAOA;;;;;;EAMA;;;;;;;;EAQA;;;;;;;;;;;;;EAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAiCMC;;;EACJ;;;;;;;;;;EAUA,0BAAYC,SAAZ,EAAuBC,WAAvB,EAAoCC,SAApC,EAA+CC,cAA/C,EAA+D;EAAA;;EAC7D;;;;;EAKA,SAAKC,oBAAL,GAA4BJ,SAA5B;EAEA;;;;;;EAKA,SAAKC,WAAL,GACEA,WAAW,IACX,IAAII,0CAAJ,CACE,IADF,EAEEL,SAAS,GAAGA,SAAS,CAACM,WAAb,GAA2BC,SAFtC,CAFF;EAOA;;;;;EAIA,SAAKL,SAAL,GAAiBA,SAAjB;EAEA;;;;;EAIA,SAAKC,cAAL,GACEA,cAAc,IAAI,IAAIK,sCAAJ,CAAuBR,SAAS,CAACM,WAAjC,CADpB,CA9B6D;;EAkC7D,SAAKH,cAAL,CAAoBM,MAApB,GAA6BT,SAAS,CAACS,MAAvC;EACA,SAAKN,cAAL,CAAoBO,QAApB,GAA+BR,SAA/B;EAEA;;;;;;EAKA,SAAKS,KAAL,GAAa,IAAb;EAEA;;;;;;EAKA,SAAKC,cAAL,GAAsBL,SAAtB;EAEA;;;;;;EAKA,SAAKM,oBAAL,GAA4BN,SAA5B;EAEA;;;;;;EAKA,SAAKO,SAAL,GAAiB,KAAjB;EAEA;;;;;;EAKA,SAAKC,gBAAL,GAAwB,IAAxB;EAEA;;;;;;;;EAOA,SAAKC,QAAL,GAAgBT,SAAhB;EACD;;;;qCAEcU,OAAO;EACpB,UAAMD,QAAQ,GAAG,KAAKA,QAAtB;;EACA,UAAIA,QAAQ,KAAKT,SAAjB,EAA4B;EAC1B,YAAI;EACFS,UAAAA,QAAQ,CAACE,IAAT,CAAcC,IAAd,EAAoBF,KAApB;EACD,SAFD,CAEE,OAAOG,aAAP,EAAsB;EACtBC,UAAAA,0BAAG,CAACJ,KAAJ,CAAU,uBAAV,EAAmCG,aAAnC;EACD;EACF;EACF;EAED;;;;;;;;;;2CAOqBE,MAAM;EACzB,UAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAD,IAAwBA,IAAI,CAACG,MAAL,KAAgB,CAA5C,EAA+C;EAC7C,eAAOlB,SAAP;EACD;;EACD,UAAML,SAAS,GAAG,KAAKA,SAAvB;EACA,UAAIwB,WAAW,GAAGJ,IAAI,CAACK,MAAL,CAAY,UAACC,IAAD,EAAOC,IAAP,EAAgB;EAC5C,YACEA,IAAI,CAACC,KAAL,KAAezC,kCAAf,IACAkC,KAAK,CAACC,OAAN,CAAcK,IAAI,CAACE,UAAnB,CADA,IAEAF,IAAI,CAACE,UAAL,CAAgBN,MAAhB,GAAyB,CAFzB,IAGAI,IAAI,CAACE,UAAL,CAAgB,CAAhB,EAAmBC,IAAnB,KAA4B9B,SAH5B,KAIC0B,IAAI,KAAKrB,SAAT,IAAsBqB,IAAI,CAACK,OAAL,GAAeJ,IAAI,CAACI,OAJ3C,CADF,EAME;EACA,iBAAOJ,IAAP;EACD;;EACD,eAAOD,IAAP;EACD,OAXiB,EAWfrB,SAXe,CAAlB;;EAYA,UAAImB,WAAW,KAAKnB,SAApB,EAA+B;EAC7Bc,QAAAA,0BAAG,CAACa,KAAJ,CACE,oEADF,EAEE,KAAK9B,oBAAL,CAA0BK,MAF5B,EAGEiB,WAAW,CAACS,KAHd,EAIEjC,SAJF,EAKEwB,WAAW,CAACK,UAAZ,CAAuB,CAAvB,EAA0BK,KAL5B;EAOD;;EACD,aAAOV,WAAP;EACD;EAED;;;;;;;;kDAK4B;EAC1B,UAAMb,oBAAoB,GAAG,KAAKA,oBAAlC;EACA,aAAOA,oBAAoB,KAAKN,SAAzB,GACHA,SADG,GAEH8B,oCAAgB,CAACC,OAAjB,CAAyBzB,oBAAoB,CAACsB,KAA9C,CAFJ;EAGD;EAED;;;;;;;;kDAK4B;EAC1B,UAAMtB,oBAAoB,GAAG,KAAKA,oBAAlC;EACA,aAAOA,oBAAoB,KAAKN,SAAzB,GACHA,SADG,GAEHgC,MAAM,CAAC1B,oBAAoB,CAACkB,UAArB,CAAgC,CAAhC,EAAmCK,KAApC,CAFV;EAGD;EAED;;;;;;;;yCAKmB;EACjB,aAAO,KAAKI,qBAAL,GAA6B,KAAKzB,gBAAlC,GAAqD,KAAKD,SAAjE;EACD;EAED;;;;;;;;;EASA;;;;;;;;;sCASgB2B,cAAcf,aAAa;EACzC,UAAI,CAACA,WAAD,IAAgBlC,qCAAiB,CAACM,QAAlB,CAA2B4C,MAA3B,CAAkChB,WAAW,CAACiB,MAA9C,CAApB,EAA2E;EACzE,eAAOF,YAAY,GAAGA,YAAY,CAACG,GAAhB,GAAsBrC,SAAzC;EACD,OAFD,MAEO,IAAI,CAACkC,YAAL,EAAmB;EACxB,eAAOF,MAAM,CAACb,WAAW,CAACK,UAAZ,CAAuB,CAAvB,EAA0BK,KAA3B,CAAb;EACD,OALwC;;;EAOzC,UAAMS,UAAU,GAAGC,8BAAU,CAACL,YAAY,CAACR,OAAd,CAA7B;EACA,UAAMc,eAAe,GAAGD,8BAAU,CAACpB,WAAW,CAACO,OAAb,CAAlC;EACA,aAAOY,UAAU,CAACG,OAAX,KAAuBD,eAAe,CAACC,OAAhB,EAAvB,GACHP,YAAY,CAACG,GADV,GAEHL,MAAM,CAACb,WAAW,CAACK,UAAZ,CAAuB,CAAvB,EAA0BK,KAA3B,CAFV;EAGD;EAED;;;;;;;;;;;;;;;;wCAakBa,SAASC,QAAQC,KAAKC,aAAa;EACnD,UAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;EACA,WAAKrD,WAAL,CACGsD,KADH,GAEGC,IAFH,CAEQH,GAFR,EAGGI,MAHH,CAGU,IAHV,EAIGP,MAJH,CAIUA,MAJV,EAKGC,GALH,CAKOA,GALP;;EAMA,UAAIC,WAAJ,EAAiB;EACf,aAAKnD,WAAL,CAAiBmD,WAAjB,CAA6BA,WAA7B;EACD;;EACDH,MAAAA,OAAO,CAACS,gBAAR,CACEC,+BAAW,CAACC,SADd,EAEE,KAAK3D,WAAL,CAAiB4D,sBAFnB;EAIAZ,MAAAA,OAAO,CAACS,gBAAR,CACEC,+BAAW,CAACG,aADd,EAEE,KAAK7D,WAAL,CAAiB8D,iBAAjB,EAFF;EAID;EAED;;;;;;;;;;;;;;;;+CAayBC,GAAGd,QAAQC,KAAK;EAAA;;EACvC,UAAIc,UAAU,GAAG,CAAC,CAAlB;EACA,UAAIC,OAAO,GAAG3D,SAAd;EACA,UAAI6C,WAAW,GAAG7C,SAAlB;;EACA,UAAI2C,MAAM,KAAKiB,8BAAU,CAACC,GAA1B,EAA+B;EAC7BH,QAAAA,UAAU,GAAGd,GAAG,CAACkB,OAAJ,CAAY,GAAZ,CAAb;EACAH,QAAAA,OAAO,GAAGf,GAAG,CAACmB,SAAJ,CAAcL,UAAU,GAAG,CAA3B,CAAV;EACAb,QAAAA,WAAW,GAAGmB,mCAAe,CAACC,oBAA9B;EACD;;EACD,UAAMC,GAAG,GAAGC,iBAAU,CAACT,UAAU,IAAI,CAAd,GAAkBd,GAAG,CAACmB,SAAJ,CAAc,CAAd,EAAiBL,UAAjB,CAAlB,GAAiDd,GAAlD,CAAV,CACTwB,QADS,CACAJ,mCAAe,CAACK,gBADhB,EAETC,EAFS,CAEN,YAFM,EAEQ,UAAA5B,OAAO,EAAI;EAC3B,QAAA,KAAI,CAAC6B,iBAAL,CAAuB7B,OAAvB,EAAgCC,MAAhC,EAAwCC,GAAxC,EAA6CC,WAA7C;EACD,OAJS,CAAZ;;EAKA,UAAIA,WAAJ,EAAiB;EACfqB,QAAAA,GAAG,CAACM,MAAJ,CAAW,cAAX,EAA2B3B,WAA3B;EACD;;EACDY,MAAAA,CAAC,CAACgB,KAAF,CAAQP,GAAG,CAACQ,IAAZ,EAAkB/B,MAAlB,EAA0BgB,OAA1B;EACA,aAAO,IAAP;EACD;EAED;;;;;;;;;;4BAOMgB,cAAc;EAAA;;EAClB,UAAI,CAACC,SAAS,CAAC1D,MAAf,EACE,OAAO,KAAKb,cAAL,KAAwBL,SAAxB,GACHA,SADG,GAEH,KAAKK,cAAL,CAAoBgC,GAFxB;;EAGF,UAAI,CAAC,KAAK3C,WAAL,CAAiBmF,eAAtB,EAAuC;EACrC,cAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;EACD;;EACD,UAAMnF,SAAS,GAAG,KAAKA,SAAvB;EACA,UAAMoF,cAAc,GAAG,KAAKlF,oBAA5B;EACA,UAAM4D,CAAC,GAAGuB,aAAK,EAAf;EACA,UAAIC,YAAY,GACd,KAAK5E,cAAL,KAAwBL,SAAxB,GAAoCA,SAApC,GAAgD,KAAKK,cAAL,CAAoBgC,GADtE;EAEA,UAAI6C,YAAY,GAAG,KAAKC,yBAAL,EAAnB;EACA,UAAIC,YAAY,GAAG,KAAKC,yBAAL,EAAnB;;EACA,UACEH,YAAY,KAAKjG,qCAAiB,CAACC,MAAnC,IACAkG,YAAY,KAAKT,YAFnB,EAGE;EACA;EACA7D,QAAAA,0BAAG,CAACa,KAAJ,CACE,8CADF,EAEEoD,cAAc,CAAC7E,MAFjB,EAGEP,SAHF,EAIEyF,YAJF;EAMA,YAAME,oBAAoB,GAAGP,cAAc,CAACQ,yBAAf,CAC3B,KAAKjF,oBAAL,CAA0BkF,EADC,EAE3BvG,qCAAiB,CAACM,QAFS,CAA7B;EAIA,aAAKkG,wBAAL,CAA8BhC,CAA9B,EAAiCG,8BAAU,CAAC8B,IAA5C,EAAkDJ,oBAAlD;EACA,aAAKhF,oBAAL,GAA4BN,SAA5B;EACAkF,QAAAA,YAAY,GAAGlF,SAAf;EACAoF,QAAAA,YAAY,GAAGpF,SAAf;EACD;;EACD,UAAIiF,YAAY,KAAKN,YAAjB,IAAiCS,YAAY,KAAKT,YAAtD,EAAoE;EAClE7D,QAAAA,0BAAG,CAACa,KAAJ,CACE,uCADF,EAEEoD,cAAc,CAAC7E,MAFjB,EAGEP,SAHF,EAIEgF,YAJF;EAMA,YAAMgB,mBAAmB,GAAGZ,cAAc,CAACY,mBAAf,CAC1B7G,kCAD0B,EAE1B,CAAC;EAAE2C,UAAAA,IAAI,EAAE9B,SAAR;EAAmBkC,UAAAA,KAAK,EAAE+D,MAAM,CAACjB,YAAD;EAAhC,SAAD,CAF0B,CAA5B;EAIA,aAAKc,wBAAL,CAA8BhC,CAA9B,EAAiCG,8BAAU,CAAC8B,IAA5C,EAAkDC,mBAAlD;EACD;;EACDlC,MAAAA,CAAC,CAACoC,QAAF,CAAW,UAACnF,KAAD,EAAQoF,OAAR,EAAoB;EAC7B,YAAIpF,KAAJ,EAAW;EACTI,UAAAA,0BAAG,CAACJ,KAAJ,CACE,0CADF,EAEEqE,cAAc,CAAC7E,MAFjB,EAGEP,SAHF,EAIEe,KAAK,CAAC0B,MAJR;;EAMA,UAAA,MAAI,CAAC2D,cAAL,CAAoBrF,KAApB;;EACA;EACD;;EACD,YAAIoF,OAAO,CAAC5E,MAAR,GAAiB,CAArB,EAAwB;EACtB;EACA;EACD;;EACD4E,QAAAA,OAAO,CAACE,OAAR,CAAgB,UAACC,CAAD,EAAIC,CAAJ,EAAU;EACxB,cAAID,CAAC,CAACE,YAAN,EAAoB;EAClBL,YAAAA,OAAO,CAACI,CAAD,CAAP,GAAaE,IAAI,CAACC,KAAL,CAAWJ,CAAC,CAACE,YAAb,CAAb;EACD;EACF,SAJD;EAKA,YAAMG,YAAY,GAAGR,OAAO,CAAC,CAAD,CAA5B,CApB6B;;EAsB7B,YAAIQ,YAAY,CAACvF,IAAb,IAAqB,IAArB,IAA6BuF,YAAY,CAACC,OAAb,KAAyB,IAA1D,EAAgE;EAC9D;EACA,UAAA,MAAI,CAACjG,oBAAL,GAA4BN,SAA5B;EACD;;EACD,YAAMwG,iBAAiB,GAAGV,OAAO,CAACA,OAAO,CAAC5E,MAAR,GAAiB,CAAlB,CAAP,CAA4BH,IAAtD;;EACA,YAAI,EAAEyF,iBAAiB,IAAI,IAAvB,CAAJ,EAAkC;EAChC;EACA,UAAA,MAAI,CAAClG,oBAAL,GAA4BkG,iBAA5B;EACD,SA9B4B;;;EAiC7B,QAAA,MAAI,CAACT,cAAL,GAjC6B;;;EAoC7B,YAAI,MAAI,CAAC3F,KAAT,EAAgB;EACd,UAAA,MAAI,CAACqG,IAAL;;EACA,UAAA,MAAI,CAACC,KAAL,CAAW,MAAI,CAACC,gBAAL,EAAX;EACD;EACF,OAxCD;EAyCA,aAAO,IAAP;EACD;EAED;;;;;;;;;;;+BAQS;EAAA;;EACP,UAAI,CAAC,KAAKjH,WAAL,CAAiBmF,eAAtB,EAAuC;EACrC,cAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;EACD;;EACD,UAAMnF,SAAS,GAAG,KAAKA,SAAvB;EACA,UAAMoF,cAAc,GAAG,KAAKlF,oBAA5B;EACA,UAAMD,cAAc,GAAG,KAAKA,cAA5B;EACA,UAAM6D,CAAC,GAAGuB,aAAK,EAAf,CAPO;;EAUP,UAAM4B,aAAa,GAAGhH,cAAc,CAACiH,kBAAf,EAAtB;EACA,WAAKpB,wBAAL,CAA8BhC,CAA9B,EAAiCG,8BAAU,CAACC,GAA5C,EAAiD+C,aAAjD,EAXO;;EAcP,UAAME,cAAc,GAAG/B,cAAc,CAACgC,0BAAf,EAAvB;EACA,WAAKtB,wBAAL,CAA8BhC,CAA9B,EAAiCG,8BAAU,CAACC,GAA5C,EAAiDiD,cAAjD;;EAEA,UACE,KAAKxG,oBAAL,IACA,CAACjB,yBAAyB,CAAC2H,GAA1B,CAA8B,KAAK7B,yBAAL,EAA9B,CAFH,EAGE;EACA;EACA;EACA,YAAM8B,kBAAkB,GAAGlC,cAAc,CAACkC,kBAAf,CACzB,KAAK3G,oBAAL,CAA0BkF,EADD,CAA3B;EAGA,aAAKC,wBAAL,CAA8BhC,CAA9B,EAAiCG,8BAAU,CAACC,GAA5C,EAAiDoD,kBAAjD;EACD;;EAEDxD,MAAAA,CAAC,CAACoC,QAAF,CAAW,UAACnF,KAAD,EAAQoF,OAAR,EAAoB;EAC7B,YAAIpF,KAAJ,EAAW;EACTI,UAAAA,0BAAG,CAACJ,KAAJ,CACE,iDADF,EAEEqE,cAAc,CAAC7E,MAFjB,EAGEP,SAHF,EAIEe,KAAK,CAAC0B,MAJR;;EAMA,UAAA,MAAI,CAAC2D,cAAL,CAAoBrF,KAApB;EACD,SARD,MAQO;EACLoF,UAAAA,OAAO,CAACE,OAAR,CAAgB,UAACC,CAAD,EAAIC,CAAJ,EAAU;EACxB,gBAAID,CAAC,CAACE,YAAN,EAAoB;EAClBL,cAAAA,OAAO,CAACI,CAAD,CAAP,GAAaE,IAAI,CAACC,KAAL,CAAWJ,CAAC,CAACE,YAAb,CAAb;EACD;EACF,WAJD;EAKA,cAAIe,eAAJ,EAAqBC,MAArB,EAA6BC,SAA7B;;EACA,cAAItB,OAAO,CAAC5E,MAAR,GAAiB,CAArB,EAAwB;EACtBgG,YAAAA,eAAe,GAAGpB,OAAO,CAAC,CAAD,CAAzB;EACD;;EACD,cAAIA,OAAO,CAAC5E,MAAR,GAAiB,CAArB,EAAwB;EACtBiG,YAAAA,MAAM,GAAGrB,OAAO,CAAC,CAAD,CAAhB;EACD;;EACD,cAAIA,OAAO,CAAC5E,MAAR,GAAiB,CAArB,EAAwB;EACtBkG,YAAAA,SAAS,GAAGtB,OAAO,CAAC,CAAD,CAAnB;EACD,WAfI;;EAiBL;;;EACA,cAAIuB,sBAAsB,GAAGrH,SAA7B;;EACA,cACEkH,eAAe,CAACnG,IAAhB,IACAC,KAAK,CAACC,OAAN,CAAciG,eAAe,CAACnG,IAAhB,CAAqB+E,OAAnC,CAFF,EAGE;EACAuB,YAAAA,sBAAsB,GAAGH,eAAe,CAACnG,IAAhB,CAAqB+E,OAArB,CAA6BwB,IAA7B,CACvB,UAAArB,CAAC;EAAA,qBAAIA,CAAC,CAAC9F,QAAF,KAAeR,SAAnB;EAAA,aADsB,CAAzB;EAGD,WA1BI;;;EA6BL,cAAM4H,eAAe,GAAGH,SAAS,GAAGA,SAAS,CAACrG,IAAb,GAAoBf,SAArD;EACA,cAAMwH,kBAAkB,GAAGL,MAAM,GAC7B,MAAI,CAACM,oBAAL,CAA0BN,MAAM,CAACpG,IAAjC,CAD6B,GAE7Bf,SAFJ;;EAGA,cAAM0H,QAAQ,GAAG,MAAI,CAACC,eAAL,CACfN,sBADe,EAEfE,eAAe,GACXA,eADW,GAEXC,kBAAkB,GAClBA,kBADkB,GAElB,MAAI,CAAClH,oBANM,CAAjB;;EAQA,cAAMsH,SAAS,GAAG,MAAI,CAAC/F,KAAL,EAAlB;;EACA,cAAI6F,QAAQ,KAAKE,SAAb,IAA0BL,eAA9B,EAA+C;EAC7CzG,YAAAA,0BAAG,CAACa,KAAJ,CACE,mCADF,EAEEoD,cAAc,CAAC7E,MAFjB,EAGEP,SAHF,EAIE+H,QAAQ,KAAK1H,SAAb,GAAyB0H,QAAzB,GAAoC,KAJtC;EAMA,YAAA,MAAI,CAACrH,cAAL,GAAsBgH,sBAAtB;;EACA,gBAAI,MAAI,CAAChH,cAAL,IAAuB,CAACmH,kBAA5B,EAAgD;EAC9C,cAAA,MAAI,CAACnH,cAAL,CAAoBgC,GAApB,GAA0BqF,QAA1B,CAD8C;EAE/C;;EACD,YAAA,MAAI,CAACpH,oBAAL,GAA4BiH,eAAe,GACvCA,eADuC,GAEvCC,kBAFJ,CAX6C;;EAgB7C,YAAA,MAAI,CAACzB,cAAL;EACD;EACF,SArE4B;;;EAwE7B,YAAI,MAAI,CAAC3F,KAAL,KAAeJ,SAAnB,EAA8B;EAC5B,UAAA,MAAI,CAACI,KAAL,GAAayH,UAAU,CAAC,YAAM;EAC5B,YAAA,MAAI,CAACC,MAAL;EACD,WAFsB,EAEpB,MAAI,CAACnB,gBAAL,EAFoB,CAAvB;EAGD;EACF,OA7ED;EA+EA,aAAO,IAAP;EACD;EAED;;;;;;;;;4BAMMoB,MAAM;EAAA;;EACV,UAAM3H,KAAK,GAAG,KAAKA,KAAnB;;EACA,UAAI,CAACA,KAAL,EAAY;EACV,aAAKA,KAAL,GAAayH,UAAU,CAAC,YAAM;EAC5B,UAAA,MAAI,CAACC,MAAL;EACD,SAFsB,EAEpBC,IAAI,IAAI,EAFY,CAAvB;EAGD;;EACD,aAAO,IAAP;EACD;EAED;;;;;;;;6BAKO;EACL,UAAM3H,KAAK,GAAG,KAAKA,KAAnB;;EACA,UAAIA,KAAJ,EAAW;EACT4H,QAAAA,YAAY,CAAC5H,KAAD,CAAZ;EACA,aAAKA,KAAL,GAAa,IAAb;EACD;;EACD,aAAO,IAAP;EACD;;;0BArV2B;EAC1B,aAAOrB,uBAAuB,CAACiI,GAAxB,CAA4B,KAAK7B,yBAAL,EAA5B,CAAP;EACD;;;;;;;;;;;;;;;;"}