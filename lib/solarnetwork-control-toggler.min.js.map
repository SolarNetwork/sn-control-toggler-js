{"version":3,"sources":["../src/controlToggler.js"],"names":["InstructionActiveStates","Set","InstructionStates","Queued","Received","Executing","InstructionFinishedStates","Completed","Declined","ControlToggler","urlHelper","authBuilder","controlId","queryUrlHelper","instructionUrlHelper","AuthorizationV2Builder","environment","undefined","NodeDatumUrlHelper","nodeId","sourceId","timer","lastKnownDatum","lastKnownInstruction","refreshMs","pendingRefreshMs","callback","error","this","call","self","callbackError","data","Array","isArray","length","instruction","reduce","prev","curr","topic","parameters","name","created","debug","state","value","InstructionState","valueOf","Number","hasPendingStateChange","controlDatum","equals","status","val","statusDate","dateParser","instructionDate","getTime","request","method","url","contentType","now","Date","reset","date","snDate","setRequestHeader","HttpHeaders","X_SN_DATE","requestDateHeaderValue","AUTHORIZATION","buildWithSavedKey","q","queryIndex","reqData","HttpMethod","GET","indexOf","substring","HttpContentType","FORM_URLENCODED_UTF8","req","xhrRequest","mimeType","APPLICATION_JSON","on","handleRequestAuth","header","defer","send","desiredValue","arguments","signingKeyValid","Error","instrUrlHelper","queue","currentValue","pendingState","lastKnownInstructionState","pendingValue","lastKnownInstructionValue","cancelInstructionUrl","updateInstructionStateUrl","id","deferJsonRequestWithAuth","POST","queueInstructionUrl","String","awaitAll","results","notifyDelegate","forEach","e","i","responseText","JSON","parse","cancelResult","success","instructionResult","_this2","stop","start","currentRefreshMs","mostRecentUrl","mostRecentDatumUrl","viewPendingUrl","viewPendingInstructionsUrl","has","viewInstructionUrl","mostRecentDatum","active","executing","mostRecentControlDatum","find","execInstruction","pendingInstruction","_this3","getActiveInstruction","newValue","mostRecentValue","setTimeout","update","when"],"mappings":"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","file":"lib/solarnetwork-control-toggler.min.js.map","sourcesContent":["import { request as xhrRequest } from 'd3-request';\nimport { queue } from 'd3-queue';\nimport { \n\tAuthorizationV2Builder,\n\tdateParser,\n\tHttpContentType,\n\tHttpHeaders,\n\tHttpMethod,\n\tInstructionState,\n\tInstructionStates,\n\tLogger as log,\n\tNodeDatumUrlHelper,\n } from 'solarnetwork-api-core';\n\nconst SetControlParameterInstructionName = 'SetControlParameter';\n\n/**\n * Instruction states that indicate a toggle instruction is in-flight.\n * @type {Set}\n * @private\n */\nconst InstructionActiveStates = new Set([\n\tInstructionStates.Queued,\n    InstructionStates.Received,\n\tInstructionStates.Executing\n]);\n\n/**\n * Instruction states that indicate a toggle instruction is comleted or declined.\n * @type {Set}\n * @private\n */\nconst InstructionFinishedStates = new Set([\n\tInstructionStates.Completed,\n\tInstructionStates.Declined,\n]);\n\n/**\n * @typedef {Object} ControlDatum\n * @property {string} created the datum date\n * @property {string} sourceId the control ID\n * @property {number} val the control value, essentially `0` or `1`\n */\n\n /**\n  * @typedef {Object} InstructionParameter\n  * @property {string} name the parameter name\n  * @property {string} value the parameter value\n  */\n\n /**\n  * @typedef {Object} Instruction\n  * @property {number} id the unique ID of the instruction\n  * @property {string} created the instruction date\n  * @property {string} status an `InstructionStatus` name value\n  * @property {InstructionParameter[]} [parameters] the instruction parameters\n  */\n\n/**\n * The status callback function.\n * \n * This function will be invoked whenever the control value has changed. Additionally, it will be\n * invoked periodically while a state change has not been completed, even if the control value\n * has not changed. Use {@link ControlToggler#value} to get the current control value and \n * {@link ControlToggler#hasPendingStateChange} to test if that value is still pending.\n * \n * @callback ControlToggler~statusCallback\n * @this ControlToggler\n * @param {Error} [error] an error if a failure occurred\n */\n\n/**\n * Manage the state of a boolean control switch using SolarNetwork `SetControlParameter` instructions.\n * \n * Use an instance of this class to keep track of, and update the state of, a single switch-like\n * control configured on a SolarNode. Because updating the state of a control is an asynchronous \n * process involving multiple steps, this class simplifies this with a simple callback API that\n * will be invoked whenever the control value changes.\n * \n * Once the {@link ControlToggler#start} method has been called, the toggler will make periodic\n * calls to SolarNetwork to get the most recent value for the configured control ID, which it\n * treats as a {@link ControlDatum} `sourceId` value. Thus if some other process changes the\n * control, the toggler will eventually pick up that change and invoke the callback function.\n * \n * @example\n * const urlHelper = new NodeInstructionUrlHelper();\n * urlHelper.nodeId = 123;\n * \n * const auth = new TestAuthBuilder('token');\n * auth.saveSigningKey('secret');\n * \n * const toggler = new ControlTogger(urlHelper, auth, '/power/switch/1');\n * toggler.callback = function(error) {\n *   // invoked when instruction states change, or the control value changes\n *   console.log(`Control ${toggler.controlId} value == ${toggler.value()}; pending == ${toggler.hasPendingStateChange}`);\n * };\n * \n * // enable automatic keeping track of state and the callback hook\n * toggler.start();\n * \n * // ... at some point later, maybe in response to a UI event, update the state;\n * // the callback will be invoked then the value changes\n * toggler.value(1);\n */\nclass ControlToggler {\n    /**\n     * Constructor.\n     * @param {NodeInstructionUrlHelper} urlHelper the URL helper to use, which must support node instructions with the `NodeInstructionUrlHelperMixin`\n     *                    and be configured with the `nodeId` property for the node to be managed\n\t * @param {AuthorizationV2Builder} authBuilder the auth builder to authenticate requests with; the required credentials\n\t *                                             must be set appropriately\n     * @param {string} controlId the ID of the control to manage\n\t * @param {NodeDatumUrlHelper} [queryUrlHelper] a URL helper for accessing node datum via SolarQuery; if not provided one\n\t *                                              will be created using the `environment` from `urlHelper`\n     */\n    constructor(urlHelper, authBuilder, controlId, queryUrlHelper) {\n\n        /**\n         * The URL helper to use, which must support node instructions with the `NodeInstructionUrlHelperMixin`\n         * and be configured with the `nodeId` property for the node to be managed.\n         * @type {NodeInstructionUrlHelper}\n         */\n\t\tthis.instructionUrlHelper = urlHelper;\n\t\t\n\t\t/**\n\t\t * The auth builder to use for authorizing requets. The credentials must be configured to support\n\t\t * posting instructions and viewing the data for the configured `controlId`.\n\t\t * @type {AuthorizationV2Builder}\n\t\t */\n\t\tthis.authBuilder = authBuilder || new AuthorizationV2Builder(null, urlHelper ? urlHelper.environment : undefined);\n\n        /**\n         * The control ID to manage.\n         * @type {string}\n         */\n\t\tthis.controlId = controlId;\n\t\t\n\t\t/**\n\t\t * The SolarQuery URL helper.\n\t\t * @type {NodeDatumUrlHelper}\n\t\t */\n\t\tthis.queryUrlHelper = (queryUrlHelper || new NodeDatumUrlHelper(urlHelper.environment));\n\n\t\t// force the nodeId / sourceId to our controlId\n\t\tthis.queryUrlHelper.nodeId = urlHelper.nodeId;\n\t\tthis.queryUrlHelper.sourceId = controlId;\n\n        /**\n         * A timer ID for refreshing the local state.\n         * @type {number}\n         * @private\n         */\n\t\tthis.timer = null;\n\t\t\n        /**\n         * The last known instruction status. The `val` property indicates the control value.\n         * @type {ControlDatum}\n         * @private\n         */\n        this.lastKnownDatum = undefined;\n\n        /**\n         * The last known instruction object.\n         * @type {Instruction}\n         * @private\n         */\n        this.lastKnownInstruction = undefined;\n\n        /**\n         * The refresh rate, in milliseconds.\n         * Defaults to 20 seconds.\n         * @type {number}\n         */\n        this.refreshMs = 20000;\n\n        /**\n         * The refresh rate, in milliseconds, when a toggle instruction is queued.\n         * Defaults to 5 seconds.\n         * @type {number}\n         */\n        this.pendingRefreshMs = 5000;\n\n        /**\n         * A callback function, which is called after the state of the control changes.\n         * The `this` reference will be set to this object. If an error has occurred,\n         * the error will be passed as the first argument.\n         * \n         * @type {function}\n         */\n        this.callback = undefined;\n    }\n\n\tnotifyDelegate(error) {\n        const callback = this.callback;\n\t\tif ( callback !== undefined ) {\n\t\t\ttry {\n\t\t\t\tcallback.call(self, error);\n\t\t\t} catch ( callbackError ) {\n\t\t\t\tlog.error('Error in callback: %s', callbackError);\n\t\t\t}\n\t\t}\n\t}\n\n    /**\n     * Find an active `SetControlParameterInstruction` for the configured `controlId`.\n     * \n     * @param {Instruction[]} data array of instructions\n     * @returns {Instruction} the active instruction, or `undefined`\n     * @private\n     */\n    getActiveInstruction(data) {\n\t\tif ( !Array.isArray(data) || data.length === 0 ) {\n\t\t\treturn undefined;\n        }\n        const controlId = this.controlId;\n\t\tvar instruction = data.reduce((prev, curr) => {\n\t\t\tif ( curr.topic === SetControlParameterInstructionName && Array.isArray(curr.parameters)\n\t\t\t\t&& curr.parameters.length > 0 && curr.parameters[0].name === controlId\n\t\t\t\t&& (prev === undefined || prev.created < curr.created) ) {\n\t\t\t\treturn curr;\n\t\t\t}\n\t\t\treturn prev;\n\t\t}, undefined);\n\t\tif ( instruction !== undefined ) {\n\t\t\tlog.debug('Active instruction for %d found in state %s (set control %s to %s)', \n\t\t\t\tthis.instructionUrlHelper.nodeId, instruction.state, controlId, instruction.parameters[0].value);\n\t\t}\n\t\treturn instruction;\n\t}\n    \n    /**\n     * Get the last know instruction state, if available.\n     * @returns {InstructionState} the last known instruction state, or `undefined`\n     * @private\n     */\n\tlastKnownInstructionState() {\n        const lastKnownInstruction = this.lastKnownInstruction;\n\t\treturn (lastKnownInstruction === undefined ? undefined \n\t\t\t: InstructionState.valueOf(lastKnownInstruction.state));\n\t}\n    \n    /**\n     * Get the last known instruction value, e.g. the state of the control.\n     * @returns {number} the last know value of the control (0 or 1), or `undefined`\n     * @private\n     */\n\tlastKnownInstructionValue() {\n        const lastKnownInstruction = this.lastKnownInstruction;\n\t\treturn (lastKnownInstruction === undefined ? undefined \n\t\t\t: Number(lastKnownInstruction.parameters[0].value));\n\t}\n\n    /**\n     * Calculate the refresh rate to use.\n     * @returns {number} the refresh rate to use, in milliseconds\n     * @private\n     */\n\tcurrentRefreshMs() {\n        return (this.hasPendingStateChange\n\t\t\t? this.pendingRefreshMs\n\t\t\t: this.refreshMs);\n\t}\n\n\t/**\n\t * Test if a state change is pending confirmation.\n\t * \n\t * @returns {boolean} `true` if a state change is pending (not complete)\n\t */\n\tget hasPendingStateChange() {\n\t\treturn InstructionActiveStates.has(this.lastKnownInstructionState());\n\t}\n\t\n\t/**\n\t * Return the value from either the `controlStatus` or the first parameter value of an `instruction`,\n\t * whichever is valid and more recent.\n\t * \n\t * @param {ControlDatum} controlDatum a control status object\n\t * @param {Instruction} instruction  an instruction object\n\t * @returns {number} the control status value\n\t * @private\n\t */\n\tmostRecentValue(controlDatum, instruction) {\n\t\tif ( !instruction || InstructionStates.Declined.equals(instruction.status) ) {\n\t\t\treturn (controlDatum ? controlDatum.val : undefined);\n\t\t} else if ( !controlDatum ) {\n\t\t\treturn Number(instruction.parameters[0].value);\n\t\t}\n\t\t// return the newer value\n\t\tconst statusDate = dateParser(controlDatum.created);\n\t\tconst instructionDate = dateParser(instruction.created);\n\t\treturn (statusDate.getTime() > instructionDate.getTime() \n\t\t\t? controlDatum.val \n\t\t\t: Number(instruction.parameters[0].value));\n\t}\n\t\n\t/**\n\t * Handle the authentication for a request.\n\t * \n\t * <p>If the `url` contains query parameters and the `GET`` request is **not** used,\n\t * the `HttpContentType.FORM_URLENCODED` content type will be assumed.</p>\n\t * \n\t * @param {XMLHttpRequest} request the XHR\n\t * @param {string} method the HTTP method\n\t * @param {string} url the URL\n\t * @param {string} [contentType] a HTTP content type to use\n\t * @returns {void}\n\t * @private\n\t */\n\thandleRequestAuth(request, method, url, contentType) {\n\t\tconst now = new Date();\n\t\tthis.authBuilder.reset().date(now).snDate(true)\n\t\t\t.method(method)\n\t\t\t.url(url);\n\t\tif ( contentType ) {\n\t\t\tthis.authBuilder.contentType(contentType);\n\t\t}\n\t\trequest.setRequestHeader(HttpHeaders.X_SN_DATE, this.authBuilder.requestDateHeaderValue);\n\t\trequest.setRequestHeader(HttpHeaders.AUTHORIZATION, this.authBuilder.buildWithSavedKey());\n\t}\n\n\t/**\n\t * Defer a JSON request on a queue.\n\t * \n\t * <p>If the `url` contains query parameters and the `GET`` method is **not** used,\n\t * the query parameters will be removed fom the URL and posted on the request body\n\t * instead, using the `HttpContentType.FORM_URLENCODED` content type.</p>\n\t * \n\t * @param {Queue} q the queue to defer with \n\t * @param {string} method the HTTP method\n\t * @param {string} url the URL\n\t * @returns {ControlToggler} this object\n\t * @private\n\t */\n\tdeferJsonRequestWithAuth(q, method, url) {\n\t\tlet queryIndex = -1;\n\t\tlet reqData = undefined;\n\t\tlet contentType = undefined;\n\t\tif ( method !== HttpMethod.GET ) {\n\t\t\tqueryIndex = url.indexOf('?');\n\t\t\treqData = url.substring(queryIndex + 1);\n\t\t\tcontentType = HttpContentType.FORM_URLENCODED_UTF8;\n\t\t}\n\t\tconst req = xhrRequest(queryIndex >= 0 ? url.substring(0, queryIndex) : url)\n\t\t\t.mimeType(HttpContentType.APPLICATION_JSON)\n\t\t\t.on('beforesend', (request) => {\n\t\t\t\tthis.handleRequestAuth(request, method, url, contentType);\n\t\t\t});\n\t\tif ( contentType ) {\n\t\t\treq.header('Content-Type', contentType);\n\t\t}\n\t\tq.defer(req.send, method, reqData);\n\t\treturn this;\n\t}\n    \n\t/**\n\t * Get or set the desired control value.\n\t * \n\t * @param {number} [desiredValue] the control value to set\n\t * @returns {number|ControlToggler} when called as a getter, the last known control value; when called as a\n\t *                                  setter, this object\n\t */\n\tvalue(desiredValue) {\n\t\tif ( !arguments.length ) return (this.lastKnownDatum === undefined ? undefined : this.lastKnownDatum.val);\n\t\tif ( !this.authBuilder.signingKeyValid ) {\n\t\t\tthrow new Error('Valid credentials not configured');\n\t\t}\n        const controlId = this.controlId;\n\t\tconst instrUrlHelper = this.instructionUrlHelper;\n\t\tconst q = queue();\n\t\tvar currentValue = (this.lastKnownDatum === undefined ? undefined : this.lastKnownDatum.val);\n\t\tvar pendingState = this.lastKnownInstructionState();\n\t\tvar pendingValue = this.lastKnownInstructionValue();\n\t\tif ( pendingState === InstructionStates.Queued && pendingValue !== desiredValue ) {\n\t\t\t// cancel the pending instruction\n\t\t\tlog.debug('Canceling %d pending control %s switch to %s', instrUrlHelper.nodeId, controlId,  pendingValue);\n            const cancelInstructionUrl = instrUrlHelper.updateInstructionStateUrl(\n\t\t\t\tthis.lastKnownInstruction.id, InstructionStates.Declined);\n\t\t\tthis.deferJsonRequestWithAuth(q, HttpMethod.POST, cancelInstructionUrl);\n\t\t\tthis.lastKnownInstruction = undefined;\n\t\t\tpendingState = undefined;\n\t\t\tpendingValue = undefined;\n\t\t}\n\t\tif ( currentValue !== desiredValue && pendingValue !== desiredValue ) {\n\t\t\tlog.debug('Request %d to change control %s to %d',  instrUrlHelper.nodeId, controlId, desiredValue);\n            const queueInstructionUrl = instrUrlHelper.queueInstructionUrl(SetControlParameterInstructionName, [\n\t\t\t\t{name: controlId, value: String(desiredValue)}\n\t\t\t]);\n\t\t\tthis.deferJsonRequestWithAuth(q, HttpMethod.POST, queueInstructionUrl);\n\t\t}\n\t\tq.awaitAll((error, results) => {\n\t\t\tif ( error ) {\n\t\t\t\tlog.error('Error updating %d control toggler %s: %s', instrUrlHelper.nodeId, controlId, error.status);\n\t\t\t\tthis.notifyDelegate(error);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ( results.length < 1 ) {\n\t\t\t\t// we queued nothing\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresults.forEach((e, i) => {\n\t\t\t\tif ( e.responseText ) {\n\t\t\t\t\tresults[i] = JSON.parse(e.responseText);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst cancelResult =results[0];\n\t\t\t// note == null check here, which handles either undefined or null\n\t\t\tif ( cancelResult.data == null && cancelResult.success === true ) {\n\t\t\t\t// it was cancelled\n\t\t\t\tthis.lastKnownInstruction = undefined;\n\t\t\t}\n\t\t\tconst instructionResult = results[results.length - 1].data;\n\t\t\tif ( !(instructionResult == null) ) {\n\t\t\t\t// this is the last know instruction now\n\t\t\t\tthis.lastKnownInstruction = instructionResult;\n\t\t\t}\n\t\t\t\n\t\t\t// invoke the client callback so they know the instruction state has changed\n\t\t\tthis.notifyDelegate();\n\t\t\t\n\t\t\t// reset timer to start polling at pendingRefreshMs rate\n\t\t\tif ( this.timer ) {\n\t\t\t\tthis.stop();\n\t\t\t\tthis.start(this.currentRefreshMs());\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\t\n    /**\n     * Refresh the control state from SolarNetwork.\n\t * \n\t * Once the {@link ControlToggler#start} method is called, this method is invoked periodically\n\t * automatically. Only call this directly if you need to manually update the state of the control.\n\t * \n     * @returns {ControlToggler} this object\n     */\n\tupdate() {\n\t\tif ( !this.authBuilder.signingKeyValid ) {\n\t\t\tthrow new Error('Valid credentials not configured');\n\t\t}\n\t\tconst controlId = this.controlId;\n\t\tconst instrUrlHelper = this.instructionUrlHelper;\n\t\tconst queryUrlHelper = this.queryUrlHelper;\n\t\tconst q = queue();\n\n\t\t// query for most recently available datum for control to check control value\n\t\tconst mostRecentUrl = queryUrlHelper.mostRecentDatumUrl();\n\t\tthis.deferJsonRequestWithAuth(q, HttpMethod.GET, mostRecentUrl);\n\n\t\t// query for pending instructions to see if we have an in-flight SetControlParameter on the go already\n\t\tconst viewPendingUrl = instrUrlHelper.viewPendingInstructionsUrl();\n\t\tthis.deferJsonRequestWithAuth(q, HttpMethod.GET, viewPendingUrl);\n\n\t\tif ( this.lastKnownInstruction && !InstructionFinishedStates.has(this.lastKnownInstructionState()) ) {\n\t\t\t// also refresh this specific instruction, to know when it goes to Completed so we can\n\t\t\t// assume the control value has changed, even if the mostRecent data lags behind\n\t\t\tconst viewInstructionUrl = instrUrlHelper.viewInstructionUrl(this.lastKnownInstruction.id);\n\t\t\tthis.deferJsonRequestWithAuth(q, HttpMethod.GET, viewInstructionUrl);\n\t\t}\n\n\t\tq.awaitAll((error, results) => {\n\t\t\tif ( error ) {\n\t\t\t\tlog.error('Error querying %d control toggler %s status: %s', instrUrlHelper.nodeId, controlId, error.status);\n\t\t\t\tthis.notifyDelegate(error);\n\t\t\t} else {\n\t\t\t\tresults.forEach((e, i) => {\n\t\t\t\t\tif ( e.responseText ) {\n\t\t\t\t\t\tresults[i] = JSON.parse(e.responseText);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tlet mostRecentDatum, active, executing;\n\t\t\t\tif ( results.length > 0 ) {\n\t\t\t\t\tmostRecentDatum = results[0];\n\t\t\t\t}\n\t\t\t\tif ( results.length > 1 ) {\n\t\t\t\t\tactive = results[1];\n\t\t\t\t}\n\t\t\t\tif ( results.length > 2 ) {\n\t\t\t\t\texecuting = results[2];\n\t\t\t\t}\n\t\t\t\t// get current status of control via most recent datum\n\t\t\t\t/** @type {ControlDatum} */\n\t\t\t\tlet mostRecentControlDatum = undefined;\n\t\t\t\tif ( mostRecentDatum.data && Array.isArray(mostRecentDatum.data.results) ) {\n\t\t\t\t\tmostRecentControlDatum = mostRecentDatum.data.results.find((e) => e.sourceId === controlId);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// get active (pending) instruction (if any)\n\t\t\t\tconst execInstruction = (executing ? executing.data : undefined);\n\t\t\t\tconst pendingInstruction = (active ? this.getActiveInstruction(active.data) : undefined);\n\t\t\t\tconst newValue = (this.mostRecentValue(mostRecentControlDatum, execInstruction ? execInstruction \n\t\t\t\t\t\t\t\t: pendingInstruction ? pendingInstruction : this.lastKnownInstruction));\n\t\t\t\tconst currValue = this.value();\n\t\t\t\tif ( newValue !== currValue ) {\n\t\t\t\t\tlog.debug('Current %d control %s value is %s',  instrUrlHelper.nodeId, controlId, (newValue !== undefined ? newValue : 'N/A'));\n\t\t\t\t\tthis.lastKnownDatum = mostRecentControlDatum;\n\t\t\t\t\tif ( this.lastKnownDatum && !pendingInstruction ) {\n\t\t\t\t\t\tthis.lastKnownDatum.val = newValue; // force this, because instruction value might be newer than status value\n\t\t\t\t\t}\n\t\t\t\t\tthis.lastKnownInstruction = (execInstruction ? execInstruction : pendingInstruction);\n\t\t\t\t\t\n\t\t\t\t\t// invoke the client callback so they know the data has been updated\n\t\t\t\t\tthis.notifyDelegate();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// if timer was defined, keep going as if interval set\n\t\t\tif ( this.timer !== undefined ) {\n\t\t\t\tthis.timer = setTimeout(() => {\n\t\t\t\t\t\tthis.update();\n\t\t\t\t\t}, this.currentRefreshMs());\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start automatically updating the status of the configured control.\n\t * \n\t * @param {number} [when=20] an optional offset in milliseconds to start at\n\t * @returns {ControlToggler} this object\n\t */\n\tstart(when) {\n        const timer = this.timer;\n\t\tif ( !timer ) {\n\t\t\tthis.timer = setTimeout(() => {\n\t\t\t\t\tthis.update();\n\t\t\t\t}, (when || 20));\n\t\t}\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Stop automatically updating the status of the configured control.\n\t * \n\t * @returns {ControlToggler} this object\n\t */\n\tstop() {\n        const timer = this.timer;\n\t\tif ( timer ) {\n\t\t\tclearTimeout(timer);\n\t\t\tthis.timer = null;\n\t\t}\n\t\treturn this;\n\t}\n}\n\nexport default ControlToggler;\n"]}